package com.engine;

import com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder;
import com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder.VertexInfo;
import com.noise.OpenSimplexNoise;

public class GridThread extends Thread {
	
	@Override
	public void run() {
		
		
		
	}
	
	private final int gridMin = -25;
	private final int gridMax = 25;
	private final int scale = 1;
	
	private float acceleration = 0;
	
	public static float accelerationIncre = 0.03f;
	
	private int zS = 0;
	private int xS = 0;
	
	public void render(MeshPartBuilder builder, OpenSimplexNoise noise, float offIncr, float size, float accelerationIncre){
		
		acceleration -= accelerationIncre;
		
		float zoff = acceleration;
		for(int z = 0; z < gridMax; z += scale){
			float xoff = 0;
			for(int x = 0; x < gridMax; x += scale){
				zS = z+gridMin;
				xS = x+gridMin;
				builder.rect(new VertexInfo().setPos(xS, (float) (noise.eval(xoff, zoff)*size), zS),
							new VertexInfo().setPos(xS, (float) (noise.eval(xoff, zoff+offIncr)*size), zS+scale),
							new VertexInfo().setPos(xS+scale, (float) (noise.eval(xoff+offIncr, zoff)*size), zS),
							new VertexInfo().setPos(xS+scale, (float) (noise.eval(xoff+offIncr, zoff+offIncr)*size), zS+scale) );
				
				xoff += offIncr;
			}
			zoff += offIncr;
		}
	}
	
}
