package com.wav;

import java.io.*;

public class WriteExample {
	
	private static String file;
	private static long sampleRate;
	private static double duration;
	private static double[] buffer;
	
	public WriteExample(String file, long sampleRate, double duration){
		this.file = file;
		this.sampleRate = sampleRate;
		this.duration = duration;
	}
	
	public void populateBuffer(double bufferPoint, int index){
		 
	}
	
	public void run(){
		System.out.println("running...");
		try {

			// Calculate the number of frames required for specified duration
			long numFrames = (long) (duration * sampleRate);

			// Create a wav file with the name specified as the first argument
			WavFile wavFile = WavFile.newWavFile(new File(file), 2, numFrames, 16, sampleRate);

			// Create a buffer of 100 frames
//			double[][] buffer = new double[2][100];

			// Initialise a local frame counter
			long frameCounter = 0;

			int count = 0;
			
			// Loop until all frames written
			while (frameCounter < numFrames) {
				// Determine how many frames to write, up to a maximum of the
				// buffer size
				long remaining = wavFile.getFramesRemaining();
				int toWrite = (remaining > 100) ? 100 : (int) remaining;

				// Fill the buffer, one tone per channel
//				for (int s = 0; s < toWrite; s++, frameCounter++) {
//					buffer[0][s] = Math.sin(2.0 * Math.PI * 400 * frameCounter / sampleRate);
//					buffer[1][s] = Math.sin(2.0 * Math.PI * 500 * frameCounter / sampleRate);
//				}
				
				count ++;
				
				// Write the buffer
				wavFile.writeFrames(buffer, toWrite);
			}
			
			System.out.println("count: "+count);

			// Close the wavFile
			wavFile.close();
		} catch (Exception e) {
			System.err.println(e);
		}
		System.out.println("finnished!");
	}
}
